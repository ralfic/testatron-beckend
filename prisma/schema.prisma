generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int        @id @default(autoincrement())
    email     String     @unique
    role      Role       @default(USER)
    firstName String
    lastName  String
    password  String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    tests     Test[]
    response  Response[]

    @@map("users")
}

model Test {
    id          Int        @id @default(autoincrement())
    title       String     @unique
    description String?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId    Int        @map("author_id")
    questions   Question[]
    response    Response[]

    @@map("tests")
}

model Question {
    id         Int          @id @default(autoincrement())
    text       String
    type       QuestionType
    isRequired Boolean      @default(false) @map("is_required")
    test       Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
    testId     Int          @map("test_id")
    options    Option[]
    answer     Answer[]

    @@map("questions")
}

model Option {
    id         Int      @id @default(autoincrement())
    text       String
    isCorrect  Boolean  @default(false) @map("is_correct")
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId Int      @map("question_id")
    answer     Answer[]
}

model Response {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int      @map("user_id")
    test      Test     @relation(fields: [testId], references: [id])
    testId    Int      @map("test_id")
    score     Float?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    answer    Answer[]

    @@map("responses")
}

model Answer {
    id         Int      @id @default(autoincrement())
    question   Question @relation(fields: [questionId], references: [id])
    questionId Int      @map("question_id")
    option     Option   @relation(fields: [optionId], references: [id])
    optionId   Int      @map("option_id")
    response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
    responseId Int      @map("response_id")
}

model UserSession {
    sid    String   @id
    sess   Json
    expire DateTime

    @@map("user_sessions")
}

enum QuestionType {
    TEXT
    MULTIPLE
    SINGLE
}

enum Role {
    ADMIN
    USER
}
