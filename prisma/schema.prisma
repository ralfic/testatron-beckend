generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    email    String @unique
    role     Role   @default(USER)
    fullName String @map("full_name")
    password String

    tests        Test[]
    testSessions TestSession[]

    @@map("users")
}

model Test {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title       String  @default("New test")
    description String?

    status             TestStatus @default(DRAFT)
    isExpired          Boolean    @default(false) @map("is_expired")
    showCorrectAnswers Boolean    @default(false) @map("show_correct_answers")
    showQuestionScore  Boolean    @default(false) @map("show_question_score")

    code      String?   @unique
    expiresAt DateTime? @map("expires_at")

    author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId Int  @map("author_id")

    questions   Question[]
    testSession TestSession[]

    @@map("tests")
}

model Question {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    text        String
    type        QuestionType
    description String?
    score       Int?         @default(3)

    test   Test @relation(fields: [testId], references: [id], onDelete: Cascade)
    testId Int  @map("test_id")

    options Option[]
    answers Answer[]

    @@map("questions")
}

model Option {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    text      String
    isCorrect Boolean @default(false) @map("is_correct")

    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId Int      @map("question_id")

    answer Answer[]

    @@map("options")
}

model TestSession {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    isFinished Boolean @default(false)

    uuid String @unique @default(nanoid())

    test   Test @relation(fields: [testId], references: [id], onDelete: Cascade)
    testId Int  @map("test_id")

    user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int?  @map("user_id")

    guestName String?

    answers Answer[]

    @@map("test_sessions")
}

model Answer {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    question      Question     @relation(fields: [questionId], references: [id])
    questionId    Int          @map("question_id")
    option        Option       @relation(fields: [optionId], references: [id])
    optionId      Int          @map("option_id")
    TestSession   TestSession? @relation(fields: [testSessionId], references: [id])
    testSessionId Int?

    @@map("answers")
}

model UserSession {
    sid    String   @id
    sess   Json
    expire DateTime

    @@map("user_sessions")
}

enum QuestionType {
    MULTIPLE
    SINGLE
}

enum Role {
    ADMIN
    USER
}

enum TestStatus {
    DRAFT
    PUBLISHED
    EXPIRED
}
