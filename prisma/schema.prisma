generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    email    String @unique
    role     Role   @default(STUDENT)
    fullName String @map("full_name")
    password String

    tests        Test[]
    testSessions TestSession[]
    testResults  TestResult[]
    

    @@map("users")
}

model Test {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title       String  @default("New test")
    description String?

    status             TestStatus @default(DRAFT)
    showCorrectAnswers Boolean    @default(false) @map("show_correct_answers")
    showQuestionScore  Boolean    @default(false) @map("show_question_score")

    code      String?   @unique
    expiresAt DateTime? @map("expires_at")

    author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId Int  @map("author_id")

    questions   Question[]

    testSessions TestSession[]

    @@map("tests")
}

model Question {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    text        String
    type        QuestionType
    description String?
    score       Int        @default(3)

    test   Test @relation(fields: [testId], references: [id], onDelete: Cascade)
    testId Int  @map("test_id")

   

    options Option[]
    answers Answer[]

    @@map("questions")
}

model Option {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    text      String
    isCorrect Boolean @default(false) @map("is_correct")

    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId Int      @map("question_id")

    answers Answer[]

    @@map("options")
}

model Answer {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    question      Question     @relation(fields: [questionId], references: [id])
    questionId    Int          @map("question_id")
    
    TestSession   TestSession? @relation(fields: [testSessionId], references: [id])
    testSessionId Int?          @map("test_session_id")

    score Int @default(0)
    status AnswerStatus @default(SKIPPED)


    
    selectedOptions Option[] 

    @@map("answers")
}

model TestResult {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    testSession TestSession @relation(fields: [testSessionId], references: [id], onDelete: Cascade)
    testSessionId Int @unique @map("test_session_id")
    user          User? @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        Int?  @map("user_id")

    score  Int
    countCorrect   Int @map("count_correct")
    countWrong     Int @map("count_wrong")
    countAlmostCorrect Int  @map("count_almost_correct")
    countSkipped   Int @map("count_skipped")

    @@map("test_results")
}

model TestSession {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    endedAt DateTime?
    status  TestSessionStatus @default(IN_PROGRESS)

    uuid String @unique @default(nanoid())

    test   Test @relation(fields: [testId], references: [id], onDelete: Cascade)
    testId Int  @map("test_id")
    user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int?  @map("user_id")
    testResult TestResult?

    guestName String? @map("guest_name")
 
    answers Answer[]


    @@map("test_sessions")
}

model UserSession {
    sid    String   @id
    sess   Json
    expire DateTime

    @@map("user_sessions")
}

enum QuestionType {
    MULTIPLE
    SINGLE
    TEXT
}

enum Role {
    ADMIN
    TEACHER
    STUDENT
}

enum TestStatus {
    DRAFT
    PUBLISHED
    EXPIRED
}

enum TestSessionStatus {
    IN_PROGRESS
    FINISHED
}

enum AnswerStatus {
    CORRECT
    INCORRECT
    ALMOST_CORRECT
    SKIPPED
}